# Node.js
# Build a general Node.js project with npm.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/javascript

trigger: none
pr: none
schedules:
- cron: "0 20 * * *"
  displayName: "4AM (UTC +8) daily release"
  branches:
    include:
    - master
    
variables:
  VAR_USER_NAME: $(user.name)
  VAR_USER_EMAIL: $(user.email)
  VAR_REPO_URL: $(Build.Repository.Uri)
  VAR_REPO_URL_FIND: "github"
  VAR_REPO_PAT: $(user.githubToken)
  VAR_REPO_URL_REPLACE: $VAR_REPO_PAT@$REPO_FIND
  VAR_REPO_URL_PAT: ${VAR_REPO_URL/$VAR_REPO_URL_FIND/$VAR_REPO_URL_REPLACE}
  VAR_REPO_BRANCHNAME: $(Build.SourceBranchName)
  VAR_USER_VERION: $(user.version)
  VAR_USER_COMMIT_MESSAGE: $(user.commitMessage)
  VAR_USER_TAG: $(user.tag)

stages:
- stage: Versioning
  pool:
    vmImage: 'ubuntu-latest'
  jobs:
  - job: versionbump
    steps:
    - task: NodeTool@0
      inputs:
        versionSpec: '10.17.0'
      displayName: 'Install Node.js'
    - script: |
        
        echo "[$(date -u)] LOG: CHECKOUT TO $VAR_REPO_BRANCHNAME"
        git checkout $VAR_REPO_BRANCHNAME -f
        echo "[$(date -u)] LOG: CONFIG NAME, EMAIL AND REMOTE"
        git config --global user.name '$VAR_USER_NAME'
        git config --global user.email '$VAR_USER_EMAIL'
        git remote add originpat $VAR_REPO_URL_PAT
        git remote -v
      displayName: 'Checkout and Config'

    - script: |
        LAST_AUTHOR=$(git log -1 --pretty=format:'%an')
        echo "[$(date -u)] LOG: GET LAST COMMIT AUTHOR: $LAST_AUTHOR"

        if [ "$LAST_AUTHOR" = "$VAR_USER_NAME" ]; then echo "Cancel pipeline as no new commit"; exit 1; fi
      displayName: 'Validation'

    - script: |
        CURRENT_VERSION=$(node -p "require('./package.json').version")
        echo "[$(date -u)] LOG: CURRENT VERSION: $CURRENT_VERSION"

        VAR_USER_VERION=$(npm version --git-tag-version=false patch)
        echo "[$(date -u)] LOG: NEW VERSION: $VAR_USER_VERION"

        echo "[$(date -u)] LOG: COMMIT AND PUSH:"
        git commit -a -m "$VAR_USER_COMMIT_MESSAGE $VAR_USER_VERION"
        git push originpat
      displayName: 'Version Bump'

    - script: |
        echo "[$(date -u)] LOG: VERSION: $(user.version)"
        echo "[$(date -u)] LOG: GET LATEST TAG:"
        git describe --tags $(git rev-list --tags --max-count=1)

        VAR_USER_TAG=$(Build.BuildNumber)
        echo "[$(date -u)] LOG: ADD TAG $VAR_USER_TAG"
        git tag $VAR_USER_TAG

        echo "[$(date -u)] LOG: GET CURRENT LATEST TAG:"
        git describe --tags $(git rev-list --tags --max-count=1)

        echo "[$(date -u)] LOG: PUSH TAG:"
        git push originpat --follow-tags
        git push originpat --tags
      displayName: 'Add Tag'

- stage: Testing
  dependsOn: Versioning
  condition: succeeded()
  jobs:
    - job: e2e

- stage: PrivateRelease
  dependsOn: Testing
  condition: succeeded()
  jobs:
    - job: github
      steps:
      - task: GitHubRelease@1
        inputs:
          gitHubConnection: 'amecodegenbot'
          repositoryName: 'LianwMS/autorest.az'
          action: 'create'
          target: '$(Build.SourceVersion)'
          tagSource: 'userSpecifiedTag'
          tag: '$VAR_USER_VERION'
          isPreRelease: true
          addChangeLog: false

- stage: PublicRelease
  dependsOn: Testing
  condition: succeeded()
  jobs:
    - deployment: npmjs
      environment: az-npm-release
      pool:
        vmImage: 'ubuntu-latest'
      strategy:
        runOnce:
          deploy:
            steps:
              - task: NodeTool@0
                inputs:
                  versionSpec: '10.17.0'
                displayName: 'Install Node.js'

              - script: |
                  # ensure latest npm is installed
                  npm install -g npm 

                  # make sure the versions are all synchronized and pull in dependencies
                  npx @microsoft/rush sync-versions
                  npx @microsoft/rush update 

                  # compile the code
                  npx @microsoft/rush rebuild 

                  # build the packages
                  npx @microsoft/rush publish --publish --pack --include-all --tag latest

                  # publish the packages (tag as preview by default)
                  echo "//registry.npmjs.org/:_authToken=$(azure-sdk-npm-token)" > ./.npmrc 
                  for file in common/temp/artifacts/packages/*.tgz 
                  do
                   common/temp/pnpm-local/node_modules/.bin/pnpm publish $file --tag latest --access public || echo no-worries 
                  done
                  rm ./.npmrc

