# Node.js
# Build a general Node.js project with npm.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/javascript

trigger: none
pr: none
schedules:
- cron: "0 20 * * *"
  displayName: "4AM (UTC +8) daily release"
  branches:
    include:
    - master

variables:
  VAR_REPO_URL: $(Build.Repository.Uri)
  VAR_REPO_BRANCHNAME: $(Build.SourceBranchName)
  VAR_BUILD_NUMBER: $(Build.BuildNumber)

stages:
- stage: Versioning
  pool:
    vmImage: 'ubuntu-latest'
  jobs:
  - job: VersionBump
    steps:
    - task: NodeTool@0
      inputs:
        versionSpec: '10.17.0'
      displayName: 'Install Node.js'
    - script: |
        REPO_URL_REPLACE="$(USER_GITHUB_TOKEN)@github"
        REPO_URL_PAT=${VAR_REPO_URL/'github'/$REPO_URL_REPLACE}

        echo "[$(date -u)] LOG: CHECKOUT TO $VAR_REPO_BRANCHNAME"
        git checkout $VAR_REPO_BRANCHNAME -f

        echo "[$(date -u)] LOG: CONFIG NAME, EMAIL AND REMOTE"
        git config --global user.name '$(USER_NAME)'
        git config --global user.email '$(USER_EMAIL)'
        git remote add originpat $REPO_URL_PAT
        git remote -v
      displayName: 'Checkout and Config'

    - script: |
        LAST_AUTHOR=$(git log -1 --pretty=format:'%an')
        echo "[$(date -u)] LOG: GET LAST COMMIT AUTHOR: $LAST_AUTHOR"

        if [ "$LAST_AUTHOR" = "$(USER_NAME)" ]; then echo "Cancel pipeline as no new commit"; exit 1; fi
      displayName: 'Validation'

    - script: |
        CURRENT_VERSION=$(node -p "require('./package.json').version")
        echo "[$(date -u)] LOG: CURRENT VERSION: $CURRENT_VERSION"

        USER_NEW_VERSION=$(npm version --git-tag-version=false patch)

        echo "[$(date -u)] LOG: NEW VERSION: $USER_NEW_VERSION"

        echo "[$(date -u)] LOG: COMMIT and PUSH"
        git commit -a -m "$(USER_COMMIT_MESSAGE) $USER_NEW_VERSION"
        git push originpat

      displayName: 'Version Bump'

    #- script: |
    #    echo "[$(date -u)] LOG: GET LATEST TAG:"
    #    git describe --tags $(git rev-list --tags --max-count=1)

    #    echo "[$(date -u)] LOG: ADD TAG $VAR_BUILD_NUMBER"
    #    git tag $VAR_BUILD_NUMBER

    #    echo "[$(date -u)] LOG: GET CURRENT LATEST TAG:"
    #    git describe --tags $(git rev-list --tags --max-count=1)

    #    echo "[$(date -u)] LOG: PUSH TAG:"
    #    git push originpat --follow-tags
    #    git push originpat --tags
    #  displayName: 'Add Tag'

- stage: Testing
  dependsOn: Versioning
  condition: succeeded()
  jobs:
    - job: E2E

- stage: PrivateRelease
  dependsOn: Testing
  condition: succeeded()
  jobs:
    - job: Github
      pool:
        vmImage: 'ubuntu-latest'
      steps:
      - task: NodeTool@0
        inputs:
          versionSpec: '10.17.0'
        displayName: 'Install Node.js'
      - script: |
          echo "[$(date -u)] LOG: CHECKOUT TO $VAR_REPO_BRANCHNAME"
          git checkout $VAR_REPO_BRANCHNAME -f

          echo "[$(date -u)] LOG: ENSURE LATEST NPM IS INSTALLED"
          npm install -g npm

          echo "[$(date -u)] LOG: MAKE SURE THE VERSIONS ARE ALL SYNCHRONIZED AND PULL IN DEPENDENCIES"
          npx @microsoft/rush sync-versions
          npx @microsoft/rush update 

          echo "[$(date -u)] LOG: COMPILE THE CODE"
          npx @microsoft/rush rebuild 

          echo "[$(date -u)] LOG: BUILD PACKAGE"
          npx @microsoft/rush publish --publish --pack --include-all --tag latest

          echo "[$(date -u)] LOG: PWD TO $PWD"
          echo "[$(date -u)] LOG: ArtifactStagingDirectory: $(Build.ArtifactStagingDirectory)"
          for file in $PWD/*.tgz 
          do
            echo "[$(date -u)] LOG: $file"
          done

          for file in common/temp/artifacts/packages/*.tgz 
          do
            echo "[$(date -u)] LOG: $file"
          done

          RELEASE_VERSION="$(node -p "require('./package.json').version")b"
          echo "[$(date -u)] LOG: CURRENT VERSION: $RELEASE_VERSION"
          echo "##vso[task.setvariable variable=release;isOutput=true]$RELEASE_VERSION"

          COMMIT_VERSION=$(git log --pretty=%H -1)
          echo "[$(date -u)] LOG: COMMIT VERSION: $COMMIT_VERSION"
          echo "##vso[task.setvariable variable=commit;isOutput=true]$COMMIT_VERSION"
        name: GetVersions
      - task: GitHubRelease@1
        inputs:
          gitHubConnection: 'amecodegenbot'
          repositoryName: 'LianwMS/autorest.az'
          action: 'create'
          target: '$(GetVersions.commit)'
          tagSource: 'userSpecifiedTag'
          tag: '$(GetVersions.release)'
          assets: |
            $(Build.ArtifactStagingDirectory)/*
            common/temp/artifacts/packages/*.tgz
          isPreRelease: true
          changeLogCompareToRelease: 'lastNonDraftRelease'
          changeLogType: 'commitBased'

- stage: PublicRelease
  dependsOn: Testing
  condition: succeeded()
  jobs:
    - deployment: npmjs
      environment: az-npm-release
      pool:
        vmImage: 'ubuntu-latest'
      strategy:
        runOnce:
          deploy:
            steps:
              - task: NodeTool@0
                inputs:
                  versionSpec: '10.17.0'
                displayName: 'Install Node.js'

              - script: |
                  # ensure latest npm is installed
                  npm install -g npm 

                  # make sure the versions are all synchronized and pull in dependencies
                  npx @microsoft/rush sync-versions
                  npx @microsoft/rush update 

                  # compile the code
                  npx @microsoft/rush rebuild 

                  # build the packages
                  npx @microsoft/rush publish --publish --pack --include-all --tag latest

                  # publish the packages (tag as preview by default)
                  echo "//registry.npmjs.org/:_authToken=$(azure-sdk-npm-token)" > ./.npmrc 
                  for file in common/temp/artifacts/packages/*.tgz 
                  do
                   common/temp/pnpm-local/node_modules/.bin/pnpm publish $file --tag latest --access public || echo no-worries 
                  done
                  rm ./.npmrc

